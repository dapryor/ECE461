; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M0+ --apcs=interwork -O0 --diag_suppress=9931 -I.\inc -I"C:\Users\Alex\Documents\Teaching\ECE492 - ESA\Code\git\ESA\MCU_Intro_UV5\Serial-Demo\RTE" -I"C:\Users\Alex\Documents\Teaching\ECE492 - ESA\Code\git\ESA\MCU_Intro_UV5\Serial-Demo\RTE\Device\MKL25Z128xxx4" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.12.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\main.crf src\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;18      *----------------------------------------------------------------------------*/
;;;19     int main (void) {
000000  b090              SUB      sp,sp,#0x40
;;;20     	uint8_t c='a', buffer[64];
000002  bf00              NOP      
;;;21     	uint32_t n=0;
000004  2400              MOVS     r4,#0
;;;22     	
;;;23     	Init_RGB_LEDs();
000006  f7fffffe          BL       Init_RGB_LEDs
;;;24     	Control_RGB_LEDs(0,1,0);
00000a  2200              MOVS     r2,#0
00000c  2101              MOVS     r1,#1
00000e  4610              MOV      r0,r2
000010  f7fffffe          BL       Control_RGB_LEDs
;;;25     	
;;;26     #if 0 // UART 2 
;;;27     	Init_UART2(4800);
;;;28     	
;;;29     #if USE_UART_INTERRUPTS
;;;30     	__enable_irq();
;;;31     	while (1) {
;;;32     		Send_String("\r\nHello World!");
;;;33     		Delay(200);
;;;34     	}
;;;35     #endif	
;;;36     
;;;37     	#if TRANSMIT_MODE
;;;38     	while (1) {
;;;39     		for (c='a'; c<='z'; c++) {
;;;40     			UART2_Transmit_Poll(c);
;;;41     			Delay(10);
;;;42     		}
;;;43     	}
;;;44     	#endif
;;;45     	
;;;46     	#if RECEIVE_MODE
;;;47     	UART2_Transmit_Poll('?');
;;;48     	UART2_Transmit_Poll(' ');
;;;49     	while (1) {
;;;50     		c = UART2_Receive_Poll();
;;;51     		UART2_Transmit_Poll(c+1);
;;;52     	}
;;;53     	#endif
;;;54     #endif
;;;55     	
;;;56     #if 1
;;;57     	Delay(50);
000014  2032              MOVS     r0,#0x32
000016  f7fffffe          BL       Delay
;;;58     	Init_UART0(115200);
00001a  20e1              MOVS     r0,#0xe1
00001c  0240              LSLS     r0,r0,#9
00001e  f7fffffe          BL       Init_UART0
;;;59     	Control_RGB_LEDs(1,1,0);
000022  2200              MOVS     r2,#0
000024  2101              MOVS     r1,#1
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       Control_RGB_LEDs
;;;60     
;;;61     	Send_String("\r\nHello World!\r\n");
00002c  a00e              ADR      r0,|L1.104|
00002e  f7fffffe          BL       Send_String
;;;62     	
;;;63     	UART0_Echo_Interrupt_Test();
000032  f7fffffe          BL       UART0_Echo_Interrupt_Test
;;;64     	
;;;65     //	__disable_irq();
;;;66     	
;;;67     #if 0
;;;68     	while (1) {
;;;69     		for (c='a'; c <= 'z'; c++)
;;;70     			UART0_Transmit_Poll(c);
;;;71     	}
;;;72     #endif
;;;73     	
;;;74     	// UART0 Echo
;;;75     #if 0
;;;76     	UART0_Transmit_Poll('?');
;;;77     	UART0_Transmit_Poll(' ');
;;;78     	while (1) {
;;;79     		c = UART0_Receive_Poll();
;;;80     		UART0_Transmit_Poll(c+1);
;;;81     	}
;;;82     #endif
;;;83     
;;;84     	
;;;85     	while(1){	
000036  e015              B        |L1.100|
                  |L1.56|
;;;86     		Control_RGB_LEDs(1,0,0);
000038  2200              MOVS     r2,#0
00003a  4611              MOV      r1,r2
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       Control_RGB_LEDs
;;;87     #if QUEUED_U0
;;;88     		sprintf(buffer, "1_2_3_4_5_6_7_8_9_A_B_C_D_E_F_G %5d\n\r", n++);  
000042  4622              MOV      r2,r4
000044  1c64              ADDS     r4,r4,#1
000046  a10d              ADR      r1,|L1.124|
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       __2sprintf
;;;89     		Send_String(buffer);
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       Send_String
;;;90     #else
;;;91     		printf("Hello World %d\n\r", n++);  
;;;92     #endif
;;;93     		/* Printf may crash if inadequate stack space allocated. 
;;;94     		See startup_MKL25Z4.s to change stack space. */
;;;95     		
;;;96     		Control_RGB_LEDs(0,1,0);
000054  2200              MOVS     r2,#0
000056  2101              MOVS     r1,#1
000058  4610              MOV      r0,r2
00005a  f7fffffe          BL       Control_RGB_LEDs
;;;97     		Delay(100);
00005e  2064              MOVS     r0,#0x64
000060  f7fffffe          BL       Delay
                  |L1.100|
000064  e7e8              B        |L1.56|
;;;98     	}
;;;99     
;;;100    #endif	
;;;101    	
;;;102    }
;;;103    
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
000068  0d0a4865          DCB      "\r\nHello World!\r\n",0
00006c  6c6c6f20
000070  576f726c
000074  64210d0a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L1.124|
00007c  315f325f          DCB      "1_2_3_4_5_6_7_8_9_A_B_C_D_E_F_G %5d\n\r",0
000080  335f345f
000084  355f365f
000088  375f385f
00008c  395f415f
000090  425f435f
000094  445f455f
000098  465f4720
00009c  2535640a
0000a0  0d00    
0000a2  00                DCB      0
0000a3  00                DCB      0

;*** Start embedded assembler ***

#line 1 "src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 383 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0-Beta4\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 384

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 397
|__asm___6_main_c_main____REVSH| PROC
#line 398

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
